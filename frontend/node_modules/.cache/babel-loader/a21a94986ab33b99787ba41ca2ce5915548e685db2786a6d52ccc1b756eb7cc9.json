{"ast":null,"code":"/**\n * Simple Translation Service for The Real Real Realtor\n * 真正的房地产经纪人简单翻译服务\n */\n\n// Common rental-related translations\nconst commonTranslations = {\n  // Greetings\n  'hello': {\n    en: 'Hello',\n    zh: '你好'\n  },\n  'hi': {\n    en: 'Hi',\n    zh: '嗨'\n  },\n  'thank you': {\n    en: 'Thank you',\n    zh: '谢谢'\n  },\n  'thanks': {\n    en: 'Thanks',\n    zh: '谢谢'\n  },\n  // Common questions\n  'what documents do i need to rent an apartment': {\n    en: 'What documents do I need to rent an apartment?',\n    zh: '租房需要什么文件？'\n  },\n  'how do i find apartments near nyu': {\n    en: 'How do I find apartments near NYU?',\n    zh: '如何找到纽约大学附近的公寓？'\n  },\n  'what\\'s the difference between manhattan and jersey city': {\n    en: 'What\\'s the difference between Manhattan and Jersey City?',\n    zh: '曼哈顿和泽西市有什么区别？'\n  },\n  'how do i set up utilities': {\n    en: 'How do I set up utilities?',\n    zh: '如何设置水电煤气？'\n  },\n  // Common responses\n  'i can help you with': {\n    en: 'I can help you with',\n    zh: '我可以帮助您'\n  },\n  'to rent an apartment in nyc': {\n    en: 'To rent an apartment in NYC',\n    zh: '在纽约租房'\n  },\n  'you typically need': {\n    en: 'you typically need',\n    zh: '您通常需要'\n  }\n};\nexport class TranslationService {\n  /**\n   * Attempt to translate a message using common translations\n   */\n  static translateMessage(message, targetLanguage) {\n    const messageLower = message.toLowerCase().trim();\n\n    // Check for exact matches first\n    if (commonTranslations[messageLower]) {\n      return commonTranslations[messageLower][targetLanguage];\n    }\n\n    // Check for partial matches\n    for (const [key, translation] of Object.entries(commonTranslations)) {\n      if (messageLower.includes(key) || key.includes(messageLower)) {\n        return translation[targetLanguage];\n      }\n    }\n\n    // If no translation found, return original message with a note\n    const noTranslationNote = {\n      en: message,\n      // Keep original if it's already English\n      zh: message // Keep original if it's already Chinese\n    };\n    return noTranslationNote[targetLanguage];\n  }\n\n  /**\n   * Get the display message based on current language\n   */\n  static getDisplayMessage(message, currentLanguage) {\n    // If we have a translation in the target language, use it\n    if (currentLanguage === 'zh' && message.message_zh) {\n      return message.message_zh;\n    }\n    if (currentLanguage === 'en' && message.message_en) {\n      return message.message_en;\n    }\n\n    // If the message is already in the target language, return as is\n    if (message.language === currentLanguage) {\n      return message.message;\n    }\n\n    // Try to translate using our simple translation service\n    return this.translateMessage(message.message, currentLanguage);\n  }\n\n  /**\n   * Check if a message can be translated\n   */\n  static canTranslate(message) {\n    const messageLower = message.toLowerCase().trim();\n    return Object.keys(commonTranslations).some(key => messageLower.includes(key) || key.includes(messageLower));\n  }\n}\nexport default TranslationService;","map":{"version":3,"names":["commonTranslations","en","zh","TranslationService","translateMessage","message","targetLanguage","messageLower","toLowerCase","trim","key","translation","Object","entries","includes","noTranslationNote","getDisplayMessage","currentLanguage","message_zh","message_en","language","canTranslate","keys","some"],"sources":["/Users/sam/Documents/Projects/The Real Real Realty/frontend/src/services/translation.ts"],"sourcesContent":["/**\n * Simple Translation Service for The Real Real Realtor\n * 真正的房地产经纪人简单翻译服务\n */\n\n// Common rental-related translations\nconst commonTranslations: Record<string, { en: string; zh: string }> = {\n  // Greetings\n  'hello': { en: 'Hello', zh: '你好' },\n  'hi': { en: 'Hi', zh: '嗨' },\n  'thank you': { en: 'Thank you', zh: '谢谢' },\n  'thanks': { en: 'Thanks', zh: '谢谢' },\n  \n  // Common questions\n  'what documents do i need to rent an apartment': {\n    en: 'What documents do I need to rent an apartment?',\n    zh: '租房需要什么文件？'\n  },\n  'how do i find apartments near nyu': {\n    en: 'How do I find apartments near NYU?',\n    zh: '如何找到纽约大学附近的公寓？'\n  },\n  'what\\'s the difference between manhattan and jersey city': {\n    en: 'What\\'s the difference between Manhattan and Jersey City?',\n    zh: '曼哈顿和泽西市有什么区别？'\n  },\n  'how do i set up utilities': {\n    en: 'How do I set up utilities?',\n    zh: '如何设置水电煤气？'\n  },\n  \n  // Common responses\n  'i can help you with': {\n    en: 'I can help you with',\n    zh: '我可以帮助您'\n  },\n  'to rent an apartment in nyc': {\n    en: 'To rent an apartment in NYC',\n    zh: '在纽约租房'\n  },\n  'you typically need': {\n    en: 'you typically need',\n    zh: '您通常需要'\n  }\n};\n\nexport class TranslationService {\n  /**\n   * Attempt to translate a message using common translations\n   */\n  static translateMessage(message: string, targetLanguage: 'en' | 'zh'): string {\n    const messageLower = message.toLowerCase().trim();\n    \n    // Check for exact matches first\n    if (commonTranslations[messageLower]) {\n      return commonTranslations[messageLower][targetLanguage];\n    }\n    \n    // Check for partial matches\n    for (const [key, translation] of Object.entries(commonTranslations)) {\n      if (messageLower.includes(key) || key.includes(messageLower)) {\n        return translation[targetLanguage];\n      }\n    }\n    \n    // If no translation found, return original message with a note\n    const noTranslationNote = {\n      en: message, // Keep original if it's already English\n      zh: message  // Keep original if it's already Chinese\n    };\n    \n    return noTranslationNote[targetLanguage];\n  }\n  \n  /**\n   * Get the display message based on current language\n   */\n  static getDisplayMessage(\n    message: ChatMessage, \n    currentLanguage: 'en' | 'zh'\n  ): string {\n    // If we have a translation in the target language, use it\n    if (currentLanguage === 'zh' && message.message_zh) {\n      return message.message_zh;\n    }\n    if (currentLanguage === 'en' && message.message_en) {\n      return message.message_en;\n    }\n    \n    // If the message is already in the target language, return as is\n    if (message.language === currentLanguage) {\n      return message.message;\n    }\n    \n    // Try to translate using our simple translation service\n    return this.translateMessage(message.message, currentLanguage);\n  }\n  \n  /**\n   * Check if a message can be translated\n   */\n  static canTranslate(message: string): boolean {\n    const messageLower = message.toLowerCase().trim();\n    return Object.keys(commonTranslations).some(key => \n      messageLower.includes(key) || key.includes(messageLower)\n    );\n  }\n}\n\nexport default TranslationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}