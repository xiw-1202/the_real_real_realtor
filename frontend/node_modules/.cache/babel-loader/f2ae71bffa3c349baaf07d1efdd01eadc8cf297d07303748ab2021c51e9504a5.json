{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Documents/Projects/The Real Real Realty/frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ChatInterface from './components/ChatInterface';\nimport Header from './components/Header';\nimport WelcomeScreen from './components/WelcomeScreen';\nimport { chatApi } from './services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentLanguage, setCurrentLanguage] = useState('en');\n  const [sessionId] = useState(() => uuidv4());\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [showWelcome, setShowWelcome] = useState(true);\n  const [systemReady, setSystemReady] = useState(false);\n\n  // Check system health on mount\n  useEffect(() => {\n    const checkSystemHealth = async () => {\n      try {\n        const health = await chatApi.getHealth();\n        setSystemReady(health.chatbot_ready);\n      } catch (error) {\n        console.error('System health check failed:', error);\n        setSystemReady(false);\n      }\n    };\n    checkSystemHealth();\n  }, []);\n  const sendMessage = async messageText => {\n    if (!messageText.trim() || isLoading) return;\n    setIsLoading(true);\n    setError(null);\n\n    // Add user message\n    const userMessage = {\n      id: uuidv4(),\n      message: messageText,\n      language: currentLanguage,\n      session_id: sessionId,\n      timestamp: new Date(),\n      role: 'user'\n    };\n    setMessages(prev => [...prev, userMessage]);\n    try {\n      // Send to API\n      const response = await chatApi.sendMessage({\n        message: messageText,\n        language: currentLanguage,\n        session_id: sessionId,\n        message_type: 'query'\n      });\n\n      // Add bot response with both language versions if available\n      const botMessage = {\n        id: uuidv4(),\n        message: response.message,\n        message_en: response.language === 'en' ? response.message : undefined,\n        message_zh: response.language === 'zh' ? response.message : undefined,\n        language: response.language,\n        session_id: response.session_id,\n        timestamp: new Date(response.timestamp),\n        role: 'assistant'\n      };\n      setMessages(prev => [...prev, botMessage]);\n\n      // Hide welcome screen after first interaction\n      if (showWelcome) {\n        setShowWelcome(false);\n      }\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'An error occurred');\n      console.error('Error sending message:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const setLanguage = language => {\n    setCurrentLanguage(language);\n  };\n  const clearMessages = () => {\n    setMessages([]);\n    setShowWelcome(true);\n    setError(null);\n  };\n  const handleStartChat = () => {\n    setShowWelcome(false);\n  };\n  const handleGoBack = () => {\n    setShowWelcome(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-screen bg-gray-50\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      currentLanguage: currentLanguage,\n      onLanguageChange: setLanguage,\n      onClearChat: clearMessages,\n      systemReady: systemReady\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex-1 flex flex-col overflow-hidden\",\n      children: showWelcome ? /*#__PURE__*/_jsxDEV(WelcomeScreen, {\n        currentLanguage: currentLanguage,\n        onStartChat: handleStartChat,\n        onSendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ChatInterface, {\n        messages: messages,\n        currentLanguage: currentLanguage,\n        isLoading: isLoading,\n        error: error,\n        onSendMessage: sendMessage,\n        onRetry: () => setError(null),\n        onGoBack: handleGoBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"S2AsFEbaBinazMTj1qcVZVPZ3Tw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","v4","uuidv4","ChatInterface","Header","WelcomeScreen","chatApi","jsxDEV","_jsxDEV","App","_s","messages","setMessages","currentLanguage","setCurrentLanguage","sessionId","isLoading","setIsLoading","error","setError","showWelcome","setShowWelcome","systemReady","setSystemReady","checkSystemHealth","health","getHealth","chatbot_ready","console","sendMessage","messageText","trim","userMessage","id","message","language","session_id","timestamp","Date","role","prev","response","message_type","botMessage","message_en","undefined","message_zh","Error","setLanguage","clearMessages","handleStartChat","handleGoBack","className","children","onLanguageChange","onClearChat","fileName","_jsxFileName","lineNumber","columnNumber","onStartChat","onSendMessage","onRetry","onGoBack","_c","$RefreshReg$"],"sources":["/Users/sam/Documents/Projects/The Real Real Realty/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ChatInterface from './components/ChatInterface';\nimport Header from './components/Header';\nimport WelcomeScreen from './components/WelcomeScreen';\nimport { ChatMessage, Language } from './types';\nimport { chatApi } from './services/api';\n\nfunction App() {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [currentLanguage, setCurrentLanguage] = useState<Language>('en');\n  const [sessionId] = useState<string>(() => uuidv4());\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showWelcome, setShowWelcome] = useState(true);\n  const [systemReady, setSystemReady] = useState(false);\n\n  // Check system health on mount\n  useEffect(() => {\n    const checkSystemHealth = async () => {\n      try {\n        const health = await chatApi.getHealth();\n        setSystemReady(health.chatbot_ready);\n      } catch (error) {\n        console.error('System health check failed:', error);\n        setSystemReady(false);\n      }\n    };\n\n    checkSystemHealth();\n  }, []);\n\n  const sendMessage = async (messageText: string) => {\n    if (!messageText.trim() || isLoading) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    // Add user message\n    const userMessage: ChatMessage = {\n      id: uuidv4(),\n      message: messageText,\n      language: currentLanguage,\n      session_id: sessionId,\n      timestamp: new Date(),\n      role: 'user'\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n\n    try {\n      // Send to API\n      const response = await chatApi.sendMessage({\n        message: messageText,\n        language: currentLanguage,\n        session_id: sessionId,\n        message_type: 'query'\n      });\n\n      // Add bot response with both language versions if available\n      const botMessage: ChatMessage = {\n        id: uuidv4(),\n        message: response.message,\n        message_en: response.language === 'en' ? response.message : undefined,\n        message_zh: response.language === 'zh' ? response.message : undefined,\n        language: response.language,\n        session_id: response.session_id,\n        timestamp: new Date(response.timestamp),\n        role: 'assistant'\n      };\n\n      setMessages(prev => [...prev, botMessage]);\n\n      // Hide welcome screen after first interaction\n      if (showWelcome) {\n        setShowWelcome(false);\n      }\n\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'An error occurred');\n      console.error('Error sending message:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const setLanguage = (language: Language) => {\n    setCurrentLanguage(language);\n  };\n\n  const clearMessages = () => {\n    setMessages([]);\n    setShowWelcome(true);\n    setError(null);\n  };\n\n  const handleStartChat = () => {\n    setShowWelcome(false);\n  };\n\n  const handleGoBack = () => {\n    setShowWelcome(true);\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gray-50\">\n      <Header \n        currentLanguage={currentLanguage}\n        onLanguageChange={setLanguage}\n        onClearChat={clearMessages}\n        systemReady={systemReady}\n      />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {showWelcome ? (\n          <WelcomeScreen \n            currentLanguage={currentLanguage}\n            onStartChat={handleStartChat}\n            onSendMessage={sendMessage}\n          />\n        ) : (\n          <ChatInterface\n            messages={messages}\n            currentLanguage={currentLanguage}\n            isLoading={isLoading}\n            error={error}\n            onSendMessage={sendMessage}\n            onRetry={() => setError(null)}\n            onGoBack={handleGoBack}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}